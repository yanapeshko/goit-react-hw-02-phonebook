{"version":3,"sources":["components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/App.jsx","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["ContactList","contacts","onRemoveContact","className","s","TaskList","map","contact","TaskList_item","name","number","TaskList_button","type","onClick","id","Filter","value","onChangeFilter","onChange","e","target","ContactForm","state","handleChange","setState","handleSubmit","preventDefault","props","onAddContact","TaskEditor","onSubmit","this","TaskEditor_label","TaskEditor_input","TaskEditor_button","Component","App","filter","addContact","task","cont","includes","alert","length","uuidv4","prevState","changeFilter","getVisibleContacts","toLowerCase","removeContact","contactId","visibleContacts","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.89b735ee.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onRemoveContact }) => (\n  <ul className={s.TaskList}>\n    {contacts.map(contact => (\n      <li className={s.TaskList_item} key={contact.id}>\n        {contact.name + ':' + contact.number}\n        {\n          <button\n            className={s.TaskList_button}\n            type=\"button\"\n            name=\"delte\"\n            onClick={() => onRemoveContact(contact.id)}\n          >\n            delete\n          </button>\n        }\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  onRemoveContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\nexport default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Filter({ value, onChangeFilter }) {\n  return (\n    <div>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => onChangeFilter(e.target.value)}\n      />\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onchangeFilter: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\n\nexport default class ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onAddContact({ ...this.state });\n\n    this.setState({ name: '', number: '' });\n  };\n  render() {\n    return (\n      <form className={s.TaskEditor} onSubmit={this.handleSubmit}>\n        <label className={s.TaskEditor_label}>\n          Name\n          <input\n            className={s.TaskEditor_input}\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label className={s.TaskEditor_label}>\n          Number\n          <input\n            className={s.TaskEditor_input}\n            type=\"text\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button className={s.TaskEditor_button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactList from './ContactList';\nimport Filter from './Filter';\nimport ContactForm from './ContactForm';\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  addContact = task => {\n    const searchSameName = this.state.contacts\n      .map(cont => cont.name)\n      .includes(task.name);\n\n    if (searchSameName) {\n      alert(`${task.name} is already in contacts`);\n    } else if (task.name.length === 0) {\n      alert('Fields must be filled!');\n    } else {\n      const contact = {\n        ...task,\n        id: uuidv4(),\n      };\n\n      this.setState(prevState => ({\n        contacts: [...prevState.contacts, contact],\n      }));\n    }\n  };\n\n  changeFilter = filter => {\n    this.setState({ filter });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n\n    return contacts.filter(contacts =>\n      contacts.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  removeContact = contactId => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      };\n    });\n  };\n\n  render() {\n    const { filter } = this.state;\n\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n\n        <ContactForm onAddContact={this.addContact} />\n        <h2>Contacts</h2>\n        {visibleContacts.length > 1 && (\n          <Filter value={filter} onChangeFilter={this.changeFilter} />\n        )}\n        {visibleContacts.length > 0 && (\n          <ContactList\n            contacts={visibleContacts}\n            onRemoveContact={this.removeContact}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.jsx';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactForm_TaskEditor__34R4e\",\"TaskEditor_label\":\"ContactForm_TaskEditor_label__2jM2j\",\"TaskEditor_input\":\"ContactForm_TaskEditor_input__3EnSy\",\"TaskEditorinput\":\"ContactForm_TaskEditorinput__3FZof\",\"TaskEditor_button\":\"ContactForm_TaskEditor_button__34gUv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__1GJZy\",\"TaskList_item\":\"ContactList_TaskList_item__3Pt5u\",\"completed\":\"ContactList_completed__2LPUg\",\"TaskList_text\":\"ContactList_TaskList_text__CRdYa\",\"TaskList_actions\":\"ContactList_TaskList_actions__3TKYQ\",\"TaskList_button\":\"ContactList_TaskList_button__135xv\"};"],"sourceRoot":""}